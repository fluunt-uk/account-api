# This file is a template, and might need editing before it works on your project.
image: golang:1.13

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/ProjectReferral/account-api

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
  - build
  - deploy


build:
  stage: build
  script:
    - cd $CI_PROJECT_DIR
    - ls
    - git config --global url."https://projectreferral:$PIPELINE_GIT_TOKEN".insteadOf "https://gitlab.com"  
    - go mod tidy
    - go build $CI_PROJECT_DIR/cmd/main.go

deploy_to_box:
  stage: deploy
  # Generates to connect to the AWS unit the SSH key.
  before_script:
    # generate ssh key
    - mkdir -p ~/.ssh
    - echo -e "PROD_SSH_PRIVATE" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ‘[[ -f /.dockerenv ]] && echo -e “Host *\n\tStrictHostKeyChecking no\n\n” > ~/.ssh/config’

  script:
    - bash gitlab-deploy-prod.sh
#   only:
#   - master
  
  when: manual
    
    